/*
 * File: app/view/VACR.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VACR.view.VACR', {
    extend: 'Ext.panel.Panel',

    requires: [
        'VACR.view.MyForm3'
    ],

    height: 612,
    width: 800,
    layout: {
        type: 'accordion'
    },
    title: 'Visual Aircraft Recognition',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    itemId: 'reviewPanel',
                    collapsed: false,
                    title: 'Review',
                    items: [
                        {
                            xtype: 'form',
                            height: 500,
                            itemId: 'mainPanel',
                            layout: {
                                type: 'border'
                            },
                            collapsed: false,
                            title: '',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    region: 'west',
                                    itemId: 'vacrGrid',
                                    store: 'listVacrStore',
                                    listeners: {
                                        select: {
                                            fn: me.onVacrGridSelect,
                                            scope: me
                                        }
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'NAME',
                                            text: 'NAME'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'MODELNO',
                                            text: 'MODELNO'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    region: 'center',
                                    itemId: 'bottomPanel',
                                    layout: {
                                        type: 'vbox'
                                    },
                                    title: 'Aircraft Detail',
                                    items: [
                                        {
                                            xtype: 'panel',
                                            id: 'detailPanel',
                                            itemId: 'detailPanel',
                                            tpl: [
                                                '<b>Name: {NAME}</b><br>',
                                                '<b><i>Model: {MODELNO}</i></b><br>',
                                                ''
                                            ],
                                            layout: {
                                                type: 'fit'
                                            }
                                        },
                                        {
                                            xtype: 'panel',
                                            flex: 1,
                                            layout: {
                                                align: 'stretch',
                                                type: 'hbox'
                                            },
                                            items: [
                                                {
                                                    xtype: 'panel',
                                                    border: 1,
                                                    frame: true,
                                                    height: 450,
                                                    width: 230,
                                                    autoScroll: true,
                                                    items: [
                                                        {
                                                            xtype: 'dataview',
                                                            itemId: 'pictureView',
                                                            autoScroll: true,
                                                            itemSelector: 'div.thumb-wrap',
                                                            itemTpl: [
                                                                '<div style="margin-bottom: 10px;" class="thumb-wrap">',
                                                                '    <img src="images/{PICTURE}" width="200" />',
                                                                '</div>',
                                                                '<b>Name: {PICTURE}</b><br>'
                                                            ],
                                                            store: 'pictureStore'
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'panel',
                                                    itemId: 'descriptionPanel',
                                                    width: 300,
                                                    title: '',
                                                    items: [
                                                        {
                                                            xtype: 'dataview',
                                                            itemId: 'descriptionView',
                                                            tpl: [
                                                                '<ul>',
                                                                '</ul>'
                                                            ],
                                                            itemSelector: 'div.thumb-wrap',
                                                            itemTpl: [
                                                                '<div style="margin-bottom: 10px;" class="thumb-wrap">',
                                                                '    <li>{DESCRIPTION}</li>',
                                                                '</div>'
                                                            ],
                                                            store: 'descriptionStore'
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    itemId: 'practicePanel',
                    collapsed: false,
                    title: 'Practice Test',
                    items: [
                        {
                            xtype: 'form',
                            height: 500,
                            autoScroll: true,
                            bodyPadding: 10,
                            title: '',
                            items: [
                                {
                                    xtype: 'dataview',
                                    itemId: 'pictureQuizView',
                                    autoScroll: true,
                                    itemSelector: 'div.thumb-wrap',
                                    itemTpl: [
                                        '<div style="margin-bottom: 10px;" class="thumb-wrap">',
                                        '    <img src="images/{picture}" width="200" />',
                                        '        </div>'
                                    ],
                                    store: 'quizPictureStore'
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    autoRender: true,
                                    itemId: 'cmbChoice',
                                    maxWidth: 300,
                                    fieldLabel: 'Select correct choice',
                                    labelWidth: 150,
                                    autoSelect: false,
                                    displayField: 'description',
                                    queryMode: 'local',
                                    store: 'choiceStore',
                                    valueField: 'choice'
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnNext',
                                    text: 'Next',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnNextClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnPrev',
                                    text: 'Next',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnPrevClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        expand: {
                            fn: me.onPracticePanelExpand,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'myform3'
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onPanelAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onVacrGridSelect: function(rowmodel, record, index, eOpts) {
        // grab a reference to the detailPanel via itemId
        // the # in front of the id indicates that we would like to grab a reference by
        var detailPanel = this.down('#detailPanel');
        // update the detailPanel with data
        // this will trigger the tpl to become updates
        detailPanel.update(record.data);
        // grab a reference to the pictureView, notice we use down here instead of child
        // because down will go down the container hierarchy at any depth and child will
        // only retrieve direct children
        var picView = this.down('#pictureView');
        // get the pictures field out of this record
        var picData = record.get('PICTURES');
        picView.store.loadData(picData);
        // get the descriptions field
        var descData = record.get('DESCRIPTIONS');
        var descView = this.down('#descriptionView');
        descView.store.loadData(descData);
    },

    onBtnNextClick: function(button, e, eOpts) {
        var quizData = Ext.data.StoreManager.lookup('quizDataStore');
        //Check if at end
        if(VACR.view.Globals.currentRecord >= quizData.getCount() - 1)
        {
            //Reset current record
            VACR.view.Globals.currentRecord = 0;    
        }
        else
        {
            //Increase current record
            ++VACR.view.Globals.currentRecord;
        }

        VACR.view.Globals.doUpdate(this);

    },

    onBtnPrevClick: function(button, e, eOpts) {
        var quizData = Ext.data.StoreManager.lookup('quizDataStore');
        //Check if at end
        if(VACR.view.Globals.currentRecord === 0)
        {
            //Reset current record
            VACR.view.Globals.currentRecord = quizData.getCount() - 1;    
        }
        else
        {
            //Increase current record
            --VACR.view.Globals.currentRecord;
        }

        VACR.view.Globals.doUpdate(this);
    },

    onPracticePanelExpand: function(p, eOpts) {
        // Build data collection
        var theData = this.down('#vacrGrid').store;
        var quizData = Ext.data.StoreManager.lookup('quizDataStore');
        theData.each(function(item, index, count) { 
            var recID = item.data.id;
            var recDesc = item.data.modelno + " - " + item.data.name;
            quizData.add({id: recID, selectedchoice: -1, choices: 
                [{choice:0, description: recDesc},
                {choice:2, description: "C130"},
                {choice:1, description: "C131"},
                {choice:3, description: "C132"}],
                pictures: item.data.pictures
            });
        });
        VACR.view.Globals.currentRecord = 0;
        var record = quizData.getAt(VACR.view.Globals.currentRecord);
        var pictureQuizView = this.down('#pictureQuizView');
        // get the pictures field out of this record
        var picData = record.get('pictures');
        pictureQuizView.store.loadData(picData);

        // Load the choiceStore with data
        var choiceStore = Ext.data.StoreManager.lookup('choiceStore');
        var choiceData = record.get('choices');
        choiceStore.loadData(choiceData);

    },

    onPanelAfterRender: function(component, eOpts) {
        Ext.QuickTips.init();

        // Create a variable to hold our EXT Form Panel. 
        // Assign various config options as seen.	 
        var login = new Ext.FormPanel({ 
            labelWidth:80,
            url:'auth/process.php', 
            frame:true, 
            title:'Please Login', 
            defaultType:'textfield',
            monitorValid:true,
            // Specific attributes for the text fields for username / password. 
            // The "name" attribute defines the name of variables sent to the server.
            items:[{ 
                fieldLabel:'Username', 
                name:'user', 
                allowBlank:false 
            },{ 
                fieldLabel:'Password', 
                name:'pass', 
                inputType:'password', 
                allowBlank:false 
            }],

            // All the magic happens after the user clicks the button     
            buttons:[{ 
                text:'Login',
                formBind: true,	 
                // Function that fires when user clicks the button 
                handler:function(){ 
                    login.getForm().submit({ 
                        method:'POST', 
                        waitTitle:'Connecting', 
                        waitMsg:'Sending data...',

                        // Functions that fire (success or failure) when the server responds. 
                        // The one that executes is determined by the 
                        // response that comes from login.asp as seen below. The server would 
                        // actually respond with valid JSON, 
                        // something like: response.write "{ success: true}" or 
                        // response.write "{ success: false, errors: { reason: 'Login failed. Try again.' }}" 
                        // depending on the logic contained within your server script.
                        // If a success occurs, the user is notified with an alert messagebox, 
                        // and when they click "OK", they are redirected to whatever page
                        // you define as redirect. 

                        success:function(){ 
                            Ext.Msg.alert('Status', 'Login Successful!', function(btn, text){
                                if (btn == 'ok'){
                                    var redirect = 'test.asp'; 
                                    window.location = redirect;
                                }
                            });
                        },

                        // Failure function, see comment above re: success and failure. 
                        // You can see here, if login fails, it throws a messagebox
                        // at the user telling him / her as much.  

                        failure:function(form, action){ 
                            if(action.failureType == 'server'){ 
                                obj = Ext.util.JSON.decode(action.response.responseText); 
                                Ext.Msg.alert('Login Failed!', obj.errors.reason); 
                            }else{ 
                                Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText); 
                            } 
                            login.getForm().reset(); 
                        } 
                    }); 
                } 
            }] 
        });


        // This just creates a window to wrap the login form. 
        // The login object is passed to the items collection.       
        var win = new Ext.Window({
            layout:'fit',
            modal: true,
            width:300,
            height:150,
            closable: false,
            resizable: false,
            plain: true,
            border: false,
            items: [login]
        });
        win.show();
    }

});